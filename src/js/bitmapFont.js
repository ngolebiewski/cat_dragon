const fiveXfiveFont = {
    A: [" 1 ", "1 1", "111", "1 1", "1 1"],
    B: ["11 ", "1 1", "11 ", "1 1", "11 "],
    C: ["111", "1  ", "1  ", "1  ", "111"],
    D: ["11 ", "1 1", "1 1", "1 1", "11 "],
    E: ["111", "1  ", "111", "1  ", "111"],
    F: ["111", "1  ", "111", "1  ", "1  "],
    G: ["111", "1  ", "1 1", "1 1", "111"],
    H: ["1 1", "1 1", "111", "1 1", "1 1"],
    I: ["111", " 1 ", " 1 ", " 1 ", "111"],
    J: [" 11", "  1", "  1", "1 1", "111"],
    K: ["1 1", "1 1", "11 ", "1 1", "1 1"],
    L: ["1  ", "1  ", "1  ", "1  ", "111"],
    M: ["1 1", "111", "111", "1 1", "1 1"],
    N: ["1 1", "111", "111", "111", "1 1"],
    O: ["111", "1 1", "1 1", "1 1", "111"],
    P: ["111", "1 1", "111", "1  ", "1  "],
    Q: ["111", "1 1", "1 1", "111", "  1"],
    R: ["111", "1 1", "111", "11 ", "1 1"],
    S: ["111", "1  ", "111", "  1", "111"],
    T: ["111", " 1 ", " 1 ", " 1 ", " 1 "],
    U: ["1 1", "1 1", "1 1", "1 1", "111"],
    V: ["1 1", "1 1", "1 1", "1 1", " 1 "],
    W: ["1 1", "1 1", "111", "111", "1 1"],
    X: ["1 1", "1 1", " 1 ", "1 1", "1 1"],
    Y: ["1 1", "1 1", " 1 ", " 1 ", " 1 "],
    Z: ["111", "  1", " 1 ", "1  ", "111"],
    "0": ["111", "1 1", "1 1", "1 1", "111"],
    "1": [" 1 ", "11 ", " 1 ", " 1 ", "111"],
    "2": ["111", "  1", "111", "1  ", "111"],
    "3": ["111", "  1", "111", "  1", "111"],
    "4": ["1 1", "1 1", "111", "  1", "  1"],
    "5": ["111", "1  ", "111", "  1", "111"],
    "6": ["111", "1  ", "111", "1 1", "111"],
    "7": ["111", "  1", " 1 ", " 1 ", " 1 "],
    "8": ["111", "1 1", "111", "1 1", "111"],
    "9": ["111", "1 1", "111", "  1", "111"]
};

/*
export const eightXeightFont = {
    A: [
        "  11  ",
        " 1  1 ",
        " 1  1 ",
        "111111",
        "1    1",
        "1    1",
        "1    1",
        "      "
    ],
    B: [
        "11111 ",
        "1    1",
        "1    1",
        "11111 ",
        "1    1",
        "1    1",
        "11111 ",
        "      "
    ],
    C: [
        " 11111",
        "1     ",
        "1     ",
        "1     ",
        "1     ",
        "1     ",
        " 11111",
        "      "
    ],
    D: [
        "11111 ",
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        "11111 ",
        "      "
    ],
    E: [
        "111111",
        "1     ",
        "1     ",
        "11111 ",
        "1     ",
        "1     ",
        "111111",
        "      "
    ],
    F: [
        "111111",
        "1     ",
        "1     ",
        "11111 ",
        "1     ",
        "1     ",
        "1     ",
        "      "
    ],
    G: [
        " 11111",
        "1     ",
        "1     ",
        "1 111 ",
        "1    1",
        "1    1",
        " 11111",
        "      "
    ],
    H: [
        "1    1",
        "1    1",
        "1    1",
        "111111",
        "1    1",
        "1    1",
        "1    1",
        "      "
    ],
    I: [
        "111111",
        "  11  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "111111",
        "      "
    ],
    J: [
        " 111111",
        "    11 ",
        "    11 ",
        "    11 ",
        "1   11 ",
        "1   11 ",
        " 1111  ",
        "       "
    ],
    K: [
        "1   1 ",
        "1  1  ",
        "1 1   ",
        "11    ",
        "1 1   ",
        "1  1  ",
        "1   1 ",
        "      "
    ],
    L: [
        "1     ",
        "1     ",
        "1     ",
        "1     ",
        "1     ",
        "1     ",
        "111111",
        "      "
    ],
    M: [
        "1    1",
        "11  11",
        "11  11",
        "1 11 1",
        "1    1",
        "1    1",
        "1    1",
        "      "
    ],
    N: [
        "1    1",
        "11   1",
        "11   1",
        "1 1  1",
        "1  1 1",
        "1   11",
        "1    1",
        "      "
    ],
    O: [
        " 1111 ",
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        " 1111 ",
        "      "
    ],
    P: [
        "11111 ",
        "1    1",
        "1    1",
        "11111 ",
        "1     ",
        "1     ",
        "1     ",
        "      "
    ],
    Q: [
        " 1111 ",
        "1    1",
        "1    1",
        "1    1",
        "1  1 1",
        "1   1 ",
        " 1111 ",
        "      "
    ],
    R: [
        "11111 ",
        "1    1",
        "1    1",
        "11111 ",
        "1 1   ",
        "1  1  ",
        "1   1 ",
        "      "
    ],
    S: [
        " 11111",
        "1     ",
        "1     ",
        " 1111 ",
        "     1",
        "     1",
        "11111 ",
        "      "
    ],
    T: [
        "111111",
        "  11  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "      "
    ],
    U: [
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        " 1111 ",
        "      "
    ],
    V: [
        "1    1",
        "1    1",
        "1    1",
        "1    1",
        " 1  1 ",
        "  1 1 ",
        "   11 ",
        "      "
    ],
    W: [
        "1    1",
        "1    1",
        "1    1",
        "1 11 1",
        "11  11",
        "11  11",
        "1    1",
        "      "
    ],
    X: [
        "1    1",
        " 1  1 ",
        "  11  ",
        "   11 ",
        "  11  ",
        " 1  1 ",
        "1    1",
        "      "
    ],
    Y: [
        "1    1",
        " 1  1 ",
        "  11  ",
        "   11 ",
        "   11 ",
        "   11 ",
        "   11 ",
        "      "
    ],
    Z: [
        "111111",
        "     1",
        "    1 ",
        "   1  ",
        "  1   ",
        " 1    ",
        "111111",
        "      "
    ],
    "0": [
        " 1111 ",
        "1    1",
        "1   11",
        "1  1 1",
        "11   1",
        "1    1",
        " 1111 ",
        "      "
    ],
    "1": [
        "  11  ",
        " 111  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "  11  ",
        "111111",
        "      "
    ],
    "2": [
        " 1111 ",
        "1    1",
        "     1",
        "   11 ",
        " 11   ",
        "1     ",
        "111111",
        "      "
    ],
    "3": [
        " 1111 ",
        "1    1",
        "     1",
        "  111 ",
        "     1",
        "1    1",
        " 1111 ",
        "      "
    ],
    "4": [
        "    11",
        "   111",
        "  1 11",
        " 1  11",
        "111111",
        "    11",
        "    11",
        "      "
    ],
    "5": [
        "111111",
        "1     ",
        "1     ",
        "11111 ",
        "     1",
        "1    1",
        " 1111 ",
        "      "
    ],
    "6": [
        " 1111 ",
        "1    1",
        "1     ",
        "11111 ",
        "1    1",
        "1    1",
        " 1111 ",
        "      "
    ],
    "7": [
        "111111",
        "     1",
        "    1 ",
        "   1  ",
        "  1   ",
        " 1    ",
        "1     ",
        "      "
    ],
    "8": [
        " 1111 ",
        "1    1",
        "1    1",
        " 1111 ",
        "1    1",
        "1    1",
        " 1111 ",
        "      "
    ],
    "9": [
        " 1111 ",
        "1    1",
        "1    1",
        " 11111",
        "     1",
        "1    1",
        " 1111 ",
        "      "
    ]
}
*/

export default class TextWriter {
    constructor(ctx, message, scale = 4, x = 0, y = 0, color = "limegreen", font = fiveXfiveFont) {
        this.ctx = ctx
        this.message = message;
        this.scale = scale;
        this.x = x;
        this.y = y;
        this.font = font;
        this.color = color

        // create hidden span for accessibility
        this.accessibleEl = document.createElement("span");
        this.accessibleEl.textContent = message;
        this.accessibleEl.style.position = "absolute";
        this.accessibleEl.style.left = "-9999px"; // hide visually
        this.accessibleEl.style.width = "1px";
        this.accessibleEl.style.height = "1px";
        this.accessibleEl.style.overflow = "hidden";
        this.accessibleEl.setAttribute("aria-label", message);
        document.body.appendChild(this.accessibleEl);
    };

    hello() {
        console.log(this.message)
    }

    drawChar(ctx, ch, x, y, scale = 4) {
        const glyph = this.font[ch.toUpperCase()];
        if (!glyph) return; // skip unknown chars
        glyph.forEach((row, j) => {
            row.split("").forEach((px, i) => {
                if (px === "1") {
                    ctx.fillRect(x + i * scale, y + j * scale, scale, scale);
                }
            });
        });
    }

    drawText(ctx = this.ctx, message = this.message, x = this.x, y = this.y, scale = this.scale, spacing = 1) {
        [...message].forEach((ch, i) => {
            this.drawChar(ctx, ch, x + i * (scale * (3 + spacing)), y, scale);
        });

        // update hidden span text if message changed
        if (this.accessibleEl.textContent !== message) {
            this.accessibleEl.textContent = message;
            this.accessibleEl.setAttribute("aria-label", message);
        }
    }
}


// test stuff for node
const hi = new TextWriter("Hello World")
hi.hello()
